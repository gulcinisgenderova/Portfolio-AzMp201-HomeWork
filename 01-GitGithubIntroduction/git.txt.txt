Git commands
1-- 'git init'- Yeni Git repozitoriyasını işə salan Git əmridir. Bu əmri kataloqda işlətdiyiniz zaman o, layihənizin versiya nəzarətini idarə etməyə başlamaq üçün Git üçün bütün lazımi faylları və məlumat strukturlarını qurur. Bu, adətən, mövcud layihəni izləməyə başlamaq istədiyiniz zaman və ya sıfırdan yeni layihə yaratdığınız zaman işlədiyiniz ilk əmrdir.
2-- 'git clone'- Uzaq Git repozitoriyasının surətini yaratmaq üçün istifadə edilən Git əmridir. Bu, bütün deponu, o cümlədən faylları, tarixçəni və filialları yerli maşınınıza köçürməyə imkan verir. Mövcud bir layihədə əməkdaşlıq etmək, açıq mənbəli layihələrə töhfə vermək və ya sadəcə başqa bir yerdən bir layihə üzərində işləmək istədiyiniz zaman bu xüsusilə faydalıdır.
3-- 'git add'- Git-də git add əmri növbəti öhdəliyə dəyişikliklər etmək üçün istifadə olunur. Git deposunda fayllarınıza dəyişikliklər etdikdə, bu dəyişikliklər ilkin olaraq iş kataloqunuzda mövcuddur. Git add əmri növbəti öhdəliyə hansı dəyişiklikləri daxil etmək istədiyinizi seçməyə imkan verir.
4-- 'git commit -m "Commit mesajı"'- git commmit əmri müəyyən edilmiş commit mesajı ilə Git deposunda yeni öhdəlik yaratmaq üçün istifadə olunur. Layihənizdə dəyişikliklər etdikdən və git add əmrindən istifadə edərək onları səhnələşdirdikdən sonra, bu dəyişiklikləri versiya tarixçəsinə daimi olaraq qeyd etmək üçün git commit-dən istifadə edirsiniz.
5-- 'git status'- Git-dəki git status əmri iş kataloqunuzun və quruluş sahəsinin vəziyyəti haqqında məlumat verir. O, hansı faylların dəyişdirildiyini, hansı faylların növbəti öhdəliyə qoyulduğunu və hansı faylların izlənilmədiyini göstərir.
6-- 'git diff'- Git-də git diff əmri iş kataloqunda edilən dəyişikliklərlə repozitoriyanın əvvəllər yerinə yetirilən versiyası arasındakı fərqləri göstərmək üçün istifadə olunur. Dəyişiklikləri, əlavələri və silinmələri yan-yana müqayisədə göstərir.
7-- 'git log'-  Git log icra qeydlerini gosterir.Verilmiş öhdəlikdəki keçidləri izləməklə əldə edilə bilən öhdəlikləri siyahıya salın , lakin onların qarşısında ^parent işarəsi ilə verilmiş olanlardan əldə edilə bilən öhdəlikləri istisna edin . Çıxış standart olaraq tərs xronoloji ardıcıllıqla verilir.
8-- 'git pull'- Git-də git pull əmri dəyişiklikləri uzaq bir depodan cari filiala gətirmək və inteqrasiya etmək üçün istifadə olunur. Bu, digər iki əmrin birləşməsidir: git fetch və git merge.
9-- 'git push'- Git push əmrindən istifadə edərək, lokal Git repozitoriyandan bas veren dəyişiklikləri uzaq repozitoriyaya göndərmək mümkündür. Bu əmr, lokal şöbə və ya branchi uzaq repozitoriyadakı eyni şöbə və ya branch ilə birləşdirir.
10-- 'git branch'- git branch əmrinə əsasən şöbələr (branches), Git-də fərqli iş qollarında çalışmağa imkan verən və fərqli dəyişiklikləri müstəqil şəkildə saxlayan bir konseptdir. İşləmək istədiyiniz fərqli bir işə başlamaq və ya mövcud dəyişiklikləri bir-birindən müstəqil olaraq izləmək üçün şöbələr yaradıla bilər. Beləliklə, müxtəlif təlimatlar və dəyişikliklər tətbiq edə bilərsiniz, sonra isə bu işləri başqa bir şöbədə birləşdirə bilərsiniz.
11-- 'git checkout <branch_name>'- Branch deyisdirmek ucun istifade olunur.
12-- 'git merge <branch_name>' - Branchlari birlesdirmek ucun istifade olunur.
13-- ' git remote add <remote_name> <remote_url>'- Git remote komandası, Git-də müraciət etdiyiniz uzaq repozitoriyaların idarə olunmasına kömək edir. Uzaq repozitoriyalar, layihənizin internetdə və ya şəbəkədə saxlanılan versiyasıdır və sizin və başqalarının dəyişikliklərini yükləmək və göndərmək üçün istifadə oluna bilər. git remote komandası, bu uzaq əlaqələri görmək, əlavə etmək və idarə etmək üçün istifadə olunur.
14-- 'git revert <commit>'- Git revert əmrindən istifadə edərək, bir commiti geri ala bilərsiniz. Bu, seçdiyiniz bir commitin dəyişikliklərini ləğv etməyə imkan verir və yeni bir commit yaradır ki, bu commitin əsasında əvvəlki commitin əksinə dəyişikliklər yerinə yetirilir.
15--' git stash'- Git stash əmrini istifadə edərək, iş üzrə olduğunuz bir addımlığı "stashed" (saxlanmış) və ya gizləyə bilərsiniz. Bu addımğın dəyişikliklərini commitləmədən, müvafiq dəyişiklikləri tələblərə uyğun saxlamaq üçün istifadə edilir.
16-- 'git checkout -- <fayl>'- əmri, çalışma qovluğundakı bir faylı əvvəlki commitlərdəki və ya şaxələnmiş (staged) vəziyyətindəki halına geri qaytarmağa imkan verir. Bu əmr aynı zamanda faylı tətbiq edilmiş əlavə dəyişikliklərdən və ya əlavə olunmuş yeni fayllardan da qurtulmağa kömək edir.
17-- 'git merge --abort' - əmri, bir birləşmə əməliyyatını (merge operation) ləğv etmək üçün istifadə olunur. Bu əmr, birləşmə zamanı ortaya çıxan problemləri həll etmək və ya planladığınız birləşmə əməliyyatını ləğv etmək üçün istifadə edilir.
18-- 'git config --global user.name "istifadeciadi" '- Istifadecinin adini deyisir.
19-- 'git cxonfig --global user.email "istifadeciemaili"'- Istifadecinin emailini deyisir.
20-- 'git clean -n'- Bu əmr, potensial olaraq silinəcək faylları görmək üçün istifadə olunur.
21-- 'git clean -f'- Əmri, çalışma qovluğundakı çirklənməmiş (untracked) faylları və qovluqları (directories) silmək üçün istifadə olunur. Bu əmr tətbiq olunarkən diqqətli olunmalıdır, çünki silinəcək fayllar geri qaytarılmaz.
22-- 'git rm <fayl adi>'- Git repozitoriyasındakı faylı (file) və ya qovluğu (directory) silmək üçün istifadə olunur. Silinmiş faylın silinmiş saylanmağını və bu dəyişikliyin repozitoriyada təsdiqlənməsini istəyirsinizsə, bu əmri istifadə edə bilərsiniz
23-- 'git mv <köhnə_fayl> <yeni_fayl>'- Git repozitoriyasındakı faylları və ya qovluqları köçürmək və yenidən adlandırmaq üçün istifadə olunur.
24-- 'git archive --format=zip --output=filename.zip <branch_name>' -Git repozitoriyasının müvafiq bir commitini ZIP formatında tərcümə edir və sıxışdırılmış bir ZIP faylı yaradır.
25-- 'git bistect start' - Git repozitoriyasında bir bug-u (problem) tapmağa kömək edən git bisect funksiyasını başlatmağa imkan verir. git bisect vasitəsilə repozitoriyada bir commit intervalında sıra-sıra olan commitlər arasında problemli (buglu) və ya səhvli bir commiti axtarmağa nail olmaq mümkündür.
26-- 'git bistect bad' - , Git repozitoriyasında git bisect funksiyası ilə problemli bir commiti təyin etmək üçün istifadə olunur. Bu əmr ilə Git-a, həmin commitin problemli (buglu) olduğunu bildirir və Git avtomatik olaraq commit intervalını yarıya azaldıraraq növbəti hərəkəti təyin edir.
Əgər bir commitin problemli (buglu) olduğunu müəyyən etdiniz və bu commitdə problem varsa, git bisect bad əmrini istifadə edərək Gitə bildirirsiniz ki, bu commit problemli (buglu) sayılmalıdır.
27-- 'git bistect good'-  Git repozitoriyasında bir bug'u (problem) tapmaq üçün git bisect funksiyasında istifadə olunur. Bu komanda ilə Git'a, əvvəl təyin edilmiş "good" commiti bildirir və Git avtomatik olaraq commit intervalını yarıya azaldıraraq bir sonraki hərəkəti təyin edir.
Əgər bir commitin problem yaratmadığını müəyyən etdiniz və bu commitdə problem yoxdursa, git bisect good komandasını istifadə edərək Gitə bildirirsiniz ki, bu commit problemin olmadığı və ya düzgün bir halda olduğu üçün bu commiti düzgün (good) saymaq lazımdır.
28-- 'git add .'- Bütün dəyişiklikləri add edirş
29-- 'git init . '- Əmri proyektə nəzarəti dayandırmaq üçün istifadə olunur.
30-- 'git stash pop'- Komandası, git stash ilə yadda saxlanmış dəyişiklikləri geri almağa imkan verir. Bu əmr, əvvəlcə git stash ilə yadda saxlanmış dəyişiklikləri çıxarıb və əvvəlki iş üzrə halına geri qaytarır.